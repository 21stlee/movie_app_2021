{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAgCeA,MA5Bf,YAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC/C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IADzC,SAEI,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACKD,EAAOI,KAAI,SAAEC,EAAOC,GAAT,OACR,aADoC,CACpC,MAAgBL,UAAU,gBAA1B,SAA2CI,GAAlCC,QAIjB,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBCkDDC,G,kNAzDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,yDALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IARzB,2C,uDAWZ,WAIEQ,KAAKN,c,oBAGP,WAAU,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACC,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAAAe,GAAK,OACf,cAAC,EAAD,CAEExB,GAAIwB,EAAMxB,GACVC,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAMC,mBACdpB,OAAQmB,EAAMnB,QANTmB,EAAMxB,e,GAnCT0B,IAAMC,YCGTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c3c5e6f2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title} />      {/*alt와 title은 이미지 위에 커서가 위치할 때 나타나는 pop up*/}\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"movie__genres\">\r\n                    {genres.map(( genre, index ) => (       // index > 다른 이름도 상관없다. 역할은 react가 원하는 key값을 자동으로 생성하는 것이다.\r\n                        <li key={index} className=\"genres__genre\">{genre}</li>\r\n                    ))}\r\n                </ul>\r\n                {/* <p className=\"movie__summary\">{summary}</p> */}\r\n                <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;","// This is class type App.js\n\n// import React, { Component } from 'react';\nimport React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n\nclass App extends React.Component {  \n  state = {\n    isLoading: true,\n    movies: []\n  };\n  getMovies = async () => {   // async (비동기) 와 await: axios.get(URL)에 시간이 걸리는 경우, axios의 동작이 끝날 때까지 다음 동작을 기다리게 한다\n    const {\n      data: {\n        data: { movies }    // > movies.data.data.movies의 ES6식 표현\n      }\n    } = await axios.get(\"https://yts.mx/api/v2/list_movies.json?sort_by=rating\");  \n    // axios()는 fetch()의 대용으로, fetch()의 작은 layer라고 할 수 있다\n    // ?sort_by=rating은 yts에서 제공하는 옵션\n    this.setState({ movies, isLoading: false });    // movies:movies의 ES6식 표현, 앞의 movies는 state의 movies를, 뒤의 movies는 axios가 받아온 movies를 가리킨다\n  };\n\n  componentDidMount() {   // reder()가 끝나면 호출되는 함수로, yts API에서 가져오는 movie data를 fetching하는 구간이다.\n    // setTimeout(() => {\n    //   this.setState({ isLoading: false })\n    // }, 6000);\n    this.getMovies();\n  }\n\n  render() {\n    const { isLoading, movies } = this.state;   // get me 'isLoading' from the 'state', 'movies > this.movies.state.isLoading, this.movies.state.movies의 ES6식 표현\n    return (   \n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie \n                key={movie.id}\n                id={movie.id} \n                year={movie.year} \n                title={movie.title} \n                summary={movie.summary} \n                poster={movie.medium_cover_image}   // medium_cover_image는 해당 사이트 yts 내부의 실제 값\n                genres={movie.genres}\n              />\n            ))}\n          </div> \n        )}   \n      </section>     \n           \n        // If isLoading is ture, show me \"Loading\". if is not ture, show me \"We are ready\" > JavaScript ternary operator (삼항 연산자)\n        // movies는 state의 movies, movie는 mapping할 object\n        // console.log(movie);    \n      \n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}